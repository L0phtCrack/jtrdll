    int i, j;
	int c, p;
	int length;
		
	/* Get the word length */
	length = 0; while (word[length++]) ; --length;

	/* Skip if this word length is out of bounds
	   This should not be necessary, but we'll leave it here to be defensive */
	if (req_minlen > length || (req_maxlen && req_maxlen < length ))
	{
		hybrid_total = 0;
		return;
	}

	/* Calculate word rotations */

	word_rot_count=0; 	/* Number of letter positions we are rotating for this word */
  	hybrid_total = 1; 		/* Number of total rotation iterations */
	
	i=0;
	while (i < length)
	{
		/* is this letter one of our rotators? a,A, b,B etc*/
		c = word[i];
		j = 0;
		while (j < rot_poslen)
		{
			p = rot_pos[j];
			if (c == rot_chars[p] || c == rot_chars[p+1]) 	/* Is 'a' or 'A' for example */
			{
				word_rot_idx[word_rot_count] = i;		/* Save off which letter position in the word we are rotating */
				word_rot_pos[word_rot_count] = j;		/* Save off the rotation position for this slot */
				word_rotchars_pos[word_rot_count] = p; 	/* Save off the first letter position in the rotation */
				word_rot_count++;

				/* Also, set the word to the first letter in the rotation so we ensure to go through all of them */
				word[i] = rot_chars[p];

				/* And multiple number of total rotations by the number of rotations for this position */
				hybrid_total = hybrid_total * rot_len[j];

				break;
			}
			j++;
		}		

		/* Rotation cap to keep us from taking forever on words that are like longs strings of A */
		if(hybrid_total >= max_rotators)
		{
			hybrid_total = max_rotators;
			break;
		}

		i++;
	}

	/* Reset or counter for THIS word. */
	word_rot_current = 0;
