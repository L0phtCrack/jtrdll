FIND_PACKAGE(OpenSSL REQUIRED)
MESSAGE("OpenSSL include dir: ${OPENSSL_INCLUDE_DIR}")

FIND_PACKAGE(CUDA REQUIRED)
MESSAGE("CUDA libraries: ${CUDA_LIBRARIES}")

IF(${CMAKE_BUILD_TYPE} MATCHES "Debug")
SET(OPENSSL_LIBRARY "${OPENSSL_LIBRARY_DEBUG}")
ENDIF(${CMAKE_BUILD_TYPE} MATCHES "Debug")

IF(${CMAKE_BUILD_TYPE} MATCHES "Release")
SET(OPENSSL_LIBRARY "${OPENSSL_LIBRARY_RELEASE}")
ENDIF(${CMAKE_BUILD_TYPE} MATCHES "Release")


FILE(GLOB jtrdll_HEADERS
    "../src/*.h"
    "../src/aes/*.h"
    "../src/aes/openssl/*.h"
    "../src/aes/aesni/*.h"
    "../src/escrypt/*.h"
    "w64/*.h"
)

FILE(GLOB jtrdll_SOURCES
    "../src/*.c"
    "../src/*.cpp"
    "../src/aes/*.c"
    "../src/aes/openssl/*.c"
    "../src/aes/aesni/*.c"
    "../src/escrypt/*.c"
	"../src/cuda/*.cu"
    "*.cpp"
    "*.h"
	"w64/*.c"
)

IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

# Test 32/64 bits
IF("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
    MESSAGE(STATUS "Target is 64 bits")
    SET(WINXXBITS Win64)
ELSE("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
    MESSAGE(STATUS "Target is 32 bits")
    SET(WINXXBITS Win32)
ENDIF("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")

INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/src ${CMAKE_CURRENT_SOURCE_DIR}/w64 ${CMAKE_CURRENT_SOURCE_DIR}/src/aes ${CMAKE_CURRENT_SOURCE_DIR}/src/escrypt ${OPENSSL_INCLUDE_DIR} ${CUDA_INCLUDE_DIRS})
ADD_DEFINITIONS ( -D__SSE2__=1 -DHAVE_OPENCL=1 -DHAVE_CUDA=1 -DJTRDLL_EXPORTS=1 -DJTRDLL=1 -D_SCL_SECURE_NO_WARNINGS=1 -D_CRT_SECURE_NO_WARNINGS=1 -D_WIN32_WINNT=0x0501)

IF(${WINXXBITS} MATCHES "Win32")
	ADD_CUSTOM_COMMAND(TARGET ${PROJECT_NAME}
		PRE_BUILD
		COMMAND cl /E ../../src/x86-64.S | as -o x86-64.obj
		SET ( X86_64_O "x86-64.obj")
	)
ENDIF(${WINXXBITS} MATCHES "Win32") 

ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows") 

# remove #included programs
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/haval_helper.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/sboxes-s.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/sboxes.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/nonstd.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/md_helper.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/mmap-windows.c)

# remove main() programs
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/best.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/calc_stat.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/cprepair.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/detect.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/genmkvpwd.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/gladman_pwd2key.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/gost.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/mkvcalcproba.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/para-best.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/raw2dyna.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/SIPdump.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/symlink.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/tgtsnarf.c)

# remove 2john programs
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/dmg2john.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/luks2john.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/truecrypt_volume2john.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/gpg2john.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/mozilla2john.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/uaf2john.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/hccap2john.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/pfx2john.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/vncpcap2john.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/keepass2john.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/putty2john.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/wpapcap2john.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/keychain2john.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/pwsafe2john.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/wpapcap2john.h)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/keyring2john.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/racf2john.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/zip2john.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/keystore2john.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/rar2john.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/kwallet2john.c)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/ssh2john.c)

# manually compile CUDA sha224/256 code with extra define
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/cuda/rawsha256.cu)
LIST(REMOVE_ITEM jtrdll_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/cuda/rawsha224.cu)
SET_PROPERTY(SOURCE ${CMAKE_CURRENT_SOURCE_DIR}/src/cuda_rawsha256_fmt.c APPEND_STRING PROPERTY COMPILE_FLAGS " -DSHA256=1 ")
SET_PROPERTY(SOURCE ${CMAKE_CURRENT_SOURCE_DIR}/src/cuda_rawsha224_fmt.c APPEND_STRING PROPERTY COMPILE_FLAGS " -DSHA224=1 ")
CUDA_COMPILE(RAWSHA256_O src/cuda/rawsha256.cu OPTIONS -DSHA256=1)
CUDA_COMPILE(RAWSHA224_O src/cuda/rawsha224.cu OPTIONS -DSHA224=1)

# build jtrdll
CUDA_ADD_LIBRARY( jtrdll SHARED ${jtrdll_SOURCES} ${jtrdll_HEADERS} ${RAWSHA256_O} ${RAWSHA224_O} ${RAWSHA512_O} ${X86_64_O})

TARGET_LINK_LIBRARIES(jtrdll ${OPENSSL_LIBRARY})
